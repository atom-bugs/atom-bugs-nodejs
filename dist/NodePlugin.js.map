{"version":3,"file":"NodePlugin.js","sourceRoot":"","sources":["../lib/NodePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n\nimport { NodeDebugger } from './NodeDebugger';\n\nexport class NodePlugin {\n\n  private debugger: NodeDebugger;\n  private client: any;\n\n  public name: String = 'Node.js';\n  public iconPath: String = 'atom://atom-bugs-nodejs/icons/nodejs.svg';\n  public options: Object = {\n    binaryPath: {\n      type: 'text',\n      name: 'Binary Path',\n      value: '/usr/bin/local/node'\n    }\n  }\n\n  constructor () {\n    this.debugger = new NodeDebugger();\n    this.debugger.on('data', (message) => {\n      console.log(String(message));\n    });\n    this.debugger.protocol.on('console', (params) => {\n      params.args.forEach((a) => {\n        switch (a.type) {\n          case 'string': {\n            this.client.console[params.type](a.value);\n          }; break;\n          default:\n            console.log('console called', params)\n        }\n      })\n    })\n    this.debugger.protocol.on('start', () => {\n      // apply breakpoints\n      let breaks = this.client.getBreakpoints();\n      breaks.forEach((b) => {\n        let {filePath, lineNumber} = b;\n        this.didAddBreakpoint(filePath, lineNumber);\n      })\n    });\n    this.debugger.protocol.on('close', (message) => {\n      // set status to stop\n      this.client.stop();\n    });\n    this.debugger.protocol.on('pause', (params) => {\n      if (params.hitBreakpoints && params.hitBreakpoints.length > 0) {\n        params.hitBreakpoints.forEach(async (id) => {\n          let breakpoint = await this.debugger.protocol.getBreakpointById(id);\n          this.client.activateBreakpoint(breakpoint.url, breakpoint.lineNumber);\n        })\n      }\n      this.client.setCallStack(this.debugger.getCallStack());\n      this.client.setScope(this.debugger.getScope());\n      // set status to pause\n      this.client.pause();\n    });\n    this.debugger.protocol.on('resume', () => {\n      // set status to resume\n      this.client.resume();\n    });\n  }\n\n  register (client) {\n    this.client = client;\n  }\n\n  // Actions\n  didRun (setup) {\n    this.client.console.clear();\n    this.debugger.scriptPath = setup.currentFile;\n    this.debugger\n      .executeScript()\n      .then(() => {\n        this.client.run();\n      });\n  }\n  didStop () {\n    this.client.console.clear();\n    this.debugger\n      .stopScript()\n      .then(() => {\n        this.client.stop();\n      });\n  }\n  didResume () {\n    this.debugger.protocol.resume();\n  }\n  async didPause () {\n    let connected = this.debugger.protocol.isConnected();\n    if (connected) {\n      this.debugger.protocol.pause();\n    }\n  }\n  didAddBreakpoint (filePath, fileNumber) {\n    if (this.debugger.protocol.isConnected()) {\n      this.debugger.protocol.addBreakpoint(filePath, fileNumber);\n    }\n  }\n  didRemoveBreakpoint (filePath, fileNumber) {\n    if (this.debugger.protocol.isConnected()) {\n      this.debugger.protocol.removeBreakpoint(filePath, fileNumber);\n    }\n  }\n\n  didStepOver () {\n    this.debugger.protocol.stepOver();\n  }\n\n  didStepInto () {\n    this.debugger.protocol.stepInto();\n  }\n\n  didStepOut () {\n    this.debugger.protocol.stepOut();\n  }\n\n  async didRequestProperties (request, propertyView) {\n    let properties: any = await this.debugger.protocol.getProperties({\n      accessorPropertiesOnly: false,\n      generatePreview: false,\n      objectId: request.objectId,\n      ownProperties: true\n    });\n    propertyView.insertFromDescription([...properties.result]); // , ...accessors.result\n  }\n\n  async didEvaluateExpression (expression: string, evaluationView) {\n\n    let connected = this.debugger.protocol.isConnected();\n    let paused = this.debugger.protocol.isPaused();\n    if (connected && paused) {\n      let response: any = await this\n        .debugger\n        .protocol\n        .evaluate(expression)\n        .catch((e) => {\n          // do nothing\n        });\n      if (response) {\n        let result = response.result;\n        if (result) {\n          evaluationView.insertFromResult(result);\n        }\n      }\n    }\n  }\n}\n"]}