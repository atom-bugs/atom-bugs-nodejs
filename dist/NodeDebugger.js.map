{"version":3,"file":"NodeDebugger.js","sourceRoot":"","sources":["../lib/NodeDebugger.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;;;;;;;;;AAIZ,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACtC,OAAO,EAAE,YAAY,EAAE,MAAO,QAAQ,CAAC;AACvC,OAAO,EAAE,sBAAsB,EAAE,MAAO,0BAA0B,CAAC;AAEnE,MAAM,mBAAoB,SAAQ,YAAY;IAA9C;;QAIS,aAAQ,GAA2B,IAAI,sBAAsB,EAAE,CAAC;QAEhE,WAAM,GAAW,qBAAqB,CAAC;QACvC,eAAU,GAAW,IAAI,CAAC;IAmCnC,CAAC;IAjCQ,UAAU;QACf,MAAM,CAAC,IAAI,OAAO,CAAU,CAAC,OAAO;YAClC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;YAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAA;IACJ,CAAC;IAEK,aAAa;;YACjB,IAAI,IAAI,GAAG;gBACT,WAAW;gBACX,eAAe,IAAI,CAAC,UAAU,EAAE;gBAChC,IAAI,CAAC,UAAU;aAChB,CAAA;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACtB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YAC1B,CAAC;YAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;YAC5C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAA;YACpE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;gBACtC,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC,CAAC,CAAC;oBAC7E,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACrB,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YACzB,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAA;YACnE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAA;YACnE,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAA;YACjE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7D,CAAC;KAAA;CACF","sourcesContent":["'use babel';\n\n// const path = require('path')\n// const EventEmitter = require('events')\nimport { spawn } from 'child_process';\nimport { EventEmitter }  from 'events';\nimport { DebuggerProtocolClient }  from './DebuggerProtocolClient';\n\nexport class NodeDebugger extends EventEmitter {\n\n  private childProcess: any;\n\n  public protocol: DebuggerProtocolClient = new DebuggerProtocolClient();\n  public scriptPath: string;\n  public binary: string = '/usr/local/bin/node';\n  public portNumber: number = 5858;\n\n  public stopScript () {\n    return new Promise<boolean>((resolve) => {\n      this.childProcess.kill();\n      this.protocol.disconnect();\n      resolve(true);\n    })\n  }\n\n  async executeScript () {\n    let args = [\n      `--inspect`,\n      `--debug-brk=${this.portNumber}`,\n      this.scriptPath\n    ]\n    // kill if already running\n    if (this.childProcess) {\n      await this.stopScript();\n    }\n    // process\n    this.childProcess = spawn(this.binary, args)\n    this.childProcess.stdout.on('data', (res) => this.emit('data', res))\n    this.childProcess.stderr.on('data', (res) => {\n      if (String(res).match(/Waiting\\sfor\\sthe\\sdebugger\\sto\\sdisconnect\\.\\.\\./gi)) {\n        this.emit('close');\n      }\n      this.emit('data', res);\n    })\n    this.childProcess.stdout.on('end', (res) => this.emit('data', res))\n    this.childProcess.stderr.on('end', (res) => this.emit('data', res))\n    this.childProcess.on('close', (code) => this.emit('close', code))\n    this.protocol.reset();\n    return this.protocol.connect('localhost', this.portNumber);\n  }\n}\n"]}