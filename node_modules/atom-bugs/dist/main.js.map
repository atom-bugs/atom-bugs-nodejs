{"version":3,"file":"main.js","sourceRoot":"","sources":["../lib/main.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAEZ,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAG9B,MAAM,EAAE,mBAAmB,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE5D,eAAe;IAEb,QAAQ,EAAE,IAAI;IACd,UAAU,EAAE,IAAI;IAChB,aAAa,EAAE,IAAI;IACnB,QAAQ,EAAE,IAAI;IAEd,QAAQ,CAAC,KAAU;QACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACvB,OAAO,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAA;QACtD,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAEtD,IAAI,CAAC,aAAa,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE;YACzD,kBAAkB,EAAE,MAAM,IAAI,CAAC,MAAM,EAAE;SACxC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,aAAa,CAAE,MAAkB;QAC/B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;IAUhC,CAAC;IAED,UAAU;QACR,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM;IAEN,CAAC;CAEF,CAAC","sourcesContent":["'use babel';\n\nimport { MainView } from './main-view';\nimport { Bugs } from './bugs';\nimport { BugsPlugin } from './bugs-plugin';\n\nconst { CompositeDisposable, Disposable } = require('atom');\n\nexport default {\n\n  mainView: null,\n  modalPanel: null,\n  subscriptions: null,\n  instance: null,\n\n  activate(state: any) {\n    if (!atom.inSpecMode()) {\n      require('atom-package-deps').install('linter', true)\n    }\n    this.instance = new Bugs();\n    this.mainView = new MainView(state.atomBugsViewState);\n    // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable\n    this.subscriptions = new CompositeDisposable();\n    this.subscriptions.add(atom.commands.add('atom-workspace', {\n      'atom-bugs:toggle': () => this.toggle()\n    }));\n  },\n\n  consumePlugin (plugin: BugsPlugin) {\n    console.log('consume', plugin)\n    // const plugins = [].concat(plugin)\n    // for (const entry of plugins) {\n    //   this.instance.addPlugin(entry)\n    // }\n    // return new Disposable(() => {\n    //   for (const entry of plugins) {\n    //     this.instance.removePlugin(entry)\n    //   }\n    // })\n  },\n\n  deactivate () {\n    this.subscriptions.dispose();\n    this.mainView.destroy();\n  },\n\n  toggle () {\n\n  }\n\n};\n"]}