{"version":3,"file":"node-debugger.js","sourceRoot":"","sources":["../../src/plugin/node-debugger.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\n// const path = require('path')\n// const EventEmitter = require('events')\nimport { spawn } from 'child_process'\nimport { EventEmitter }  from 'events'\nimport { NodeDebuggerProtocol }  from '../protocol/node-debugger-protocol'\nimport { dirname } from 'path'\n\nexport class NodeDebugger extends EventEmitter {\n  private childProcess: any\n  public protocol: NodeDebuggerProtocol = new NodeDebuggerProtocol()\n  public scriptPath: string\n  public binaryPath: string = '/usr/local/bin/node'\n  public hostName: string = 'localhost'\n  public cwd: string\n  public portNumber: number = 5858\n  public launchArguments: Array<string> = []\n  public environmentVariables: Object = {}\n  public stopScript () {\n    return new Promise<boolean>((resolve) => {\n      this.childProcess.kill()\n      this.protocol.disconnect()\n      resolve(true)\n    })\n  }\n  public getCallStack () {\n    let callStack = this.protocol.getCallStack()\n    return callStack.map((frame) => {\n      return {\n        name: frame.functionName,\n        columnNumber: frame.location.columnNumber,\n        lineNumber: frame.location.lineNumber,\n        filePath: frame.location.script.url\n      }\n    })\n  }\n  public getScope () {\n    let firstFrame = this.protocol.getFrameByIndex(0)\n    let scope = [...firstFrame.scopeChain]\n    if (firstFrame.this) {\n      scope.unshift({\n        type: 'this',\n        object: firstFrame.this\n      })\n    }\n    return scope.map((s) => {\n      return {\n        name: s.type,\n        value: s.object\n      }\n    })\n  }\n  connect () {\n    this.protocol.reset()\n    return this\n      .protocol\n      .connect(this.hostName, this.portNumber)\n      .catch((error) => {\n        this.emit('error', error.toString())\n      })\n  }\n  normalizePath (dir) {\n    return dir.replace(/^~/, process.env.HOME)\n  }\n  async executeScript () {\n    let args = [\n      `--inspect`,\n      `--debug-brk=${this.portNumber}`,\n      this.normalizePath(this.scriptPath)\n    ].concat(this.launchArguments)\n    let options = {\n      detached: true,\n      shell: true,\n      cwd: this.cwd || this.normalizePath(dirname(this.scriptPath)),\n      env: this.environmentVariables\n    }\n    let output = ''\n    // kill if already running\n    if (this.childProcess) {\n      await this.stopScript()\n    }\n    // process\n    this.childProcess = spawn(this.binaryPath, args, options)\n    this.childProcess.stdout.setEncoding('utf8')\n    this.childProcess.stderr.setEncoding('utf8')\n    this.childProcess.stdout.on('data', (res) => {\n      this.emit('out', res.toString())\n    })\n    this.childProcess.stderr.on('data', (res) => {\n      output = output.concat(res)\n      this.emit('err', res)\n    })\n    this.childProcess.stdout.on('end', (res) => this.emit('out', res))\n    this.childProcess.stderr.on('end', (res) => this.emit('err', res))\n    this.childProcess.on('close', (code) => this.emit('close', code, output))\n    return this.connect()\n  }\n}\n"]}