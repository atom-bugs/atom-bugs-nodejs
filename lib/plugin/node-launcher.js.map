{"version":3,"file":"node-launcher.js","sourceRoot":"","sources":["../../src/plugin/node-launcher.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,mEAAwF;AACxF,6BAAoC;AACpC,iCAAoC;AAEpC;IAAkC,gCAA+B;IAAjE;;IAwCA,CAAC;IAlCC,oCAAa,GAAb,UAAe,GAAG;QAChB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAC5C,CAAC;IACD,2CAAoB,GAApB;QACE,IAAI,CAAC,GAAG;YAEN,mBAAiB,IAAI,CAAC,UAAY;YAClC,IAAI,CAAC,aAAa,CAAC,YAAG,CAAC,IAAI,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;SAChD;aACA,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC7B,MAAM,CAAC,CAAC,CAAA;IACV,CAAC;IACD,wCAAiB,GAAjB;QACE,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,cAAO,CAAC,YAAG,CAAC,IAAI,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC,CAAA;QACtF,IAAI,OAAO,GAAG,YAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;QACtC,IAAI,OAAO,GAAG,WAAI,CAAC,WAAW,EAAE,cAAc,EAAE,MAAM,CAAC,CAAA;QACvD,MAAM,CAAC;YACL,KAAK,EAAE,IAAI;YACX,GAAG,EAAE,WAAW;YAChB,GAAG,EAAE,eAAM,CAAC;gBACV,KAAK,EAAE,YAAG,CAAC,OAAO,EAAE,WAAW,CAAC;gBAChC,IAAI,EAAE,YAAG,CAAC,OAAO,EAAE,UAAU,CAAC;gBAC9B,MAAM,EAAE,YAAG,CAAC,OAAO,EAAE,YAAY,CAAC;gBAClC,IAAI,EAAE,YAAG,CAAC,OAAO,EAAE,UAAU,CAAC;gBAC9B,IAAI,EAAK,OAAO,SAAI,OAAS;gBAC7B,GAAG,EAAE,YAAG,CAAC,OAAO,EAAE,SAAS,CAAC;gBAC5B,IAAI,EAAE,YAAG,CAAC,OAAO,EAAE,UAAU,CAAC;gBAC9B,IAAI,EAAE,YAAG,CAAC,OAAO,EAAE,UAAU,CAAC;aAC/B,EAAE,IAAI,CAAC,oBAAoB,CAAC;SAC9B,CAAA;IACH,CAAC;IACD,oCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAA;IACxB,CAAC;IACH,mBAAC;AAAD,CAAC,AAxCD,CAAkC,0CAA+B,GAwChE;AAxCY,oCAAY","sourcesContent":["import { ChromeDebuggingProtocolLauncher } from 'atom-bugs-chrome-debugger/lib/launcher'\nimport { dirname, join } from 'path'\nimport { get, extend } from 'lodash'\n\nexport class NodeLauncher extends ChromeDebuggingProtocolLauncher {\n  public binaryPath: string\n  public launchArguments: Array<string>\n  public environmentVariables: Object\n  public cwd: string\n  public scriptPath: string\n  normalizePath (dir) {\n    return dir.replace(/^~/, process.env.HOME)\n  }\n  getLauncherArguments () {\n    let a = [\n      // `--inspect`,\n      `--inspect-brk=${this.portNumber}`,\n      this.normalizePath(get(this, 'scriptPath', ''))\n    ]\n    .concat(this.launchArguments)\n    return a\n  }\n  getProcessOptions () {\n    let projectPath = this.cwd || this.normalizePath(dirname(get(this, 'scriptPath', '')))\n    let envPath = get(process, 'env.PATH')\n    let npmPath = join(projectPath, 'node_modules', '.bin')\n    return {\n      shell: true,\n      cwd: projectPath,\n      env: extend({\n        SHELL: get(process, 'env.SHELL'),\n        TERM: get(process, 'env.TERM'),\n        TMPDIR: get(process, 'env.TMPDIR'),\n        USER: get(process, 'env.USER'),\n        PATH: `${npmPath}:${envPath}`,\n        PWD: get(process, 'env.PWD'),\n        LANG: get(process, 'env.LANG'),\n        HOME: get(process, 'env.HOME')\n      }, this.environmentVariables)\n    }\n  }\n  getBinaryPath (): string {\n    return this.binaryPath\n  }\n}\n"]}