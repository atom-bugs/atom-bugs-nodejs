{"version":3,"file":"node-launcher.js","sourceRoot":"","sources":["../../src/plugin/node-launcher.ts"],"names":[],"mappings":"","sourcesContent":["// import { ChromeDebuggingProtocolLauncher } from 'xatom-debug-chrome-base/lib/launcher'\n// import { dirname, join } from 'path'\n// import { get, extend, pad } from 'lodash'\n// import { exec } from 'child_process'\n//\n// export class NodeLauncher extends ChromeDebuggingProtocolLauncher {\n//   public binaryPath: string\n//   public launchArguments: Array<string>\n//   public environmentVariables: Object\n//   public cwd: string\n//   public scriptPath: string\n//   getInpectArguments (): Promise<Array<string>> {\n//     return new Promise((reject, resolve) => {\n//       let inspectArgs = []\n//       exec(`${this.getBinaryPath()} -v`, (err, stdout, stderr) => {\n//         let version = stdout.match(/^v(\\d+)\\.(\\d+).(\\d+)/);\n//         if (version) {\n//           let [completeVersion, major, minor, path] = version;\n//           if (parseInt(major) >= 8) {\n//             inspectArgs.push(`--inspect-brk=${this.portNumber}`);\n//           } else if (parseInt(major) > 6 || (parseInt(major) === 6 && parseInt(minor) >= 3)) {\n//             inspectArgs.push(`--inspect`, `--debug-brk=${this.portNumber}`);\n//           } else {\n//             throw new Error(`XAtom Debug NodeJS does not support version ${completeVersion}. Please use 6.3+`);\n//           }\n//           resolve(inspectArgs)\n//         }\n//         reject(err);\n//       })\n//     })\n//   }\n//   async getLauncherArguments () {\n//     let debugArgs = [... await this.getInpectArguments()];\n//     if (get(this, 'scriptPath.length') > 0) {\n//       debugArgs.push(this.quote(this.scriptPath))\n//     }\n//     let launcherArgs = debugArgs.concat(this.launchArguments)\n//     return launcherArgs\n//   }\n//   getProcessOptions () {\n//     if (!this.cwd) {\n//       this.cwd = dirname(get(this, 'scriptPath', ''))\n//     }\n//     let envPath = get(process, 'env.PATH')\n//     let npmPath = join(this.cwd, 'node_modules', '.bin')\n//     return {\n//       shell: true,\n//       // windowsVerbatimArguments: true,\n//       cwd: this.cwd,\n//       env: extend({\n//         SHELL: get(process, 'env.SHELL'),\n//         TERM: get(process, 'env.TERM'),\n//         TMPDIR: get(process, 'env.TMPDIR'),\n//         USER: get(process, 'env.USER'),\n//         PATH: `${npmPath}:${envPath}`,\n//         PWD: get(process, 'env.PWD'),\n//         LANG: get(process, 'env.LANG'),\n//         HOME: get(process, 'env.HOME')\n//       }, this.environmentVariables)\n//     }\n//   }\n//   getBinaryPath (): string {\n//     return this.quote(this.binaryPath)\n//   }\n// }\n"]}