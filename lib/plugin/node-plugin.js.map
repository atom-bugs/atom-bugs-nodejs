{"version":3,"file":"node-plugin.js","sourceRoot":"","sources":["../../src/plugin/node-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChromeDebuggingProtocolPlugin } from 'xatom-debug-chrome-base/lib/plugin'\n\nimport { NodeLauncher } from './node-launcher'\nimport { NodeDebugger } from './node-debugger'\nimport { Runtype, NodeOptions } from './node-options'\n\nimport { watch, FSWatcher } from 'chokidar'\nimport { resolve } from 'path'\nimport { get, isUndefined, isString } from 'lodash'\n\nexport class NodePlugin extends ChromeDebuggingProtocolPlugin {\n\n  public options: Object = NodeOptions\n  public name: String = 'Node.js'\n  public iconPath: String = 'atom://xatom-debug-nodejs/icons/nodejs.svg'\n  public launcher: NodeLauncher = new NodeLauncher()\n  public debugger: NodeDebugger = new NodeDebugger()\n\n  private watcher: FSWatcher\n\n  constructor () {\n    super()\n    this.addEventListeners()\n  }\n\n  didLaunchError (message: string) {\n    atom.notifications.addError('Atom Bugs: Node.js', {\n      detail: `Launcher error: ${message}`,\n      dismissable: true\n    })\n  }\n\n  async start (options: any) {\n    try {\n      let projectPath = this.pluginClient.getPath()\n      let socketUrl\n      this.debugger.skipFirstPause = true\n      switch (options.runType) {\n        case Runtype.CurrentFile:\n        case Runtype.Script:\n          if (options.runType === Runtype.CurrentFile) {\n            let editor = atom.workspace.getActiveTextEditor()\n            if (!isUndefined(editor)) {\n              this.launcher.scriptPath = editor.getPath()\n            }\n          } else {\n            this.launcher.scriptPath = options.scriptPath\n            this.launcher.cwd = projectPath\n          }\n          if (isString(this.launcher.scriptPath)) {\n            this.launcher.binaryPath = options.binaryPath\n            this.launcher.portNumber = options.port\n            this.launcher.launchArguments = options.launchArguments\n            this.launcher.environmentVariables = options.environmentVariables\n            socketUrl = await this.launcher.start()\n          }\n          break\n        case Runtype.Remote:\n          this.launcher.hostName = options.remoteUrl\n          this.launcher.portNumber = options.remotePort\n          socketUrl = await this.launcher.getSocketUrl()\n          break\n      }\n      if (socketUrl) {\n        this.pluginClient.run()\n        this.pluginClient.status.update('Connecting to debugger')\n        await this\n          .debugger\n          .connect(socketUrl)\n          .then(() => {\n            this.pluginClient.status.update('Debugger attached')\n            this.pluginClient.status.stopLoading()\n          })\n      }\n    } catch (e) {\n      this.pluginClient.status.update(e)\n      this.pluginClient.status.stopLoading()\n    }\n  }\n\n  async restart (options) {\n    await this.didStop()\n    this.pluginClient.status.startLoading()\n    this.pluginClient.status.update('Restarting to debugger')\n    return this.start(options)\n  }\n\n  // Actions\n  async didRun () {\n    this.pluginClient.status.startLoading()\n    this.pluginClient.status.update('Running node')\n    this.pluginClient.console.clear()\n    let options = await this.pluginClient.getOptions()\n    let projectPath = this.pluginClient.getPath()\n    if (this.watcher) {\n      this.watcher.close()\n    }\n    if (options.restartOnChanges) {\n      this.watcher = watch(resolve(projectPath, options.changesPattern || ''), {\n        ignored: [\n          /[\\/\\\\]\\./,\n          /node_modules/,\n          /bower_components/\n        ]\n      })\n      this\n        .watcher\n        .on('change', () => this.restart(options))\n        .on('unlink', () => this.restart(options))\n    }\n    return this.start(options)\n  }\n}\n"]}