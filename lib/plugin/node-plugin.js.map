{"version":3,"file":"node-plugin.js","sourceRoot":"","sources":["../../src/plugin/node-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\nimport { NodeDebugger } from './node-debugger'\nimport { Runtype, NodeOptions } from './node-options'\n\nexport class NodePlugin {\n  private debugger: NodeDebugger\n  private client: any\n  public name: String = 'Node.js'\n  public iconPath: String = 'atom://atom-bugs-nodejs/icons/nodejs.svg'\n  public options: Object = NodeOptions\n\n  constructor () {\n    this.debugger = new NodeDebugger()\n    this.debugger.on('close', (code, output) => {\n      if (code) this.client.console.error(output)\n    })\n    this.debugger.on('error', (message) => {\n      this.client.console.error(message)\n    })\n    this.debugger.protocol.on('exception', (params) => {\n      let details = params.exceptionDetails\n      this.client.console.error(details.exception.description)\n    })\n    this.debugger.protocol.on('console', (params) => {\n      params.args.forEach((a) => {\n        switch (a.type) {\n          case 'string': {\n            this.client.console[params.type](a.value)\n          } break\n          default:\n            console.log('console called', params)\n        }\n      })\n    })\n    this.debugger.protocol.on('start', () => {\n      // apply breakpoints\n      let breaks = this.client.getBreakpoints()\n      breaks.forEach((b) => {\n        let {filePath, lineNumber} = b\n        this.didAddBreakpoint(filePath, lineNumber)\n      })\n    })\n    this.debugger.protocol.on('close', (message) => {\n      // set status to stop\n      this.client.stop()\n    })\n    this.debugger.protocol.on('pause', (params) => {\n      if (params.hitBreakpoints && params.hitBreakpoints.length > 0) {\n        params.hitBreakpoints.forEach(async (id) => {\n          let breakpoint = await this.debugger.protocol.getBreakpointById(id)\n          this.client.activateBreakpoint(breakpoint.url, breakpoint.lineNumber)\n        })\n      }\n      this.client.setCallStack(this.debugger.getCallStack())\n      this.client.setScope(this.debugger.getScope())\n      // set status to pause\n      this.client.pause()\n    })\n    this.debugger.protocol.on('resume', () => {\n      // set status to resume\n      this.client.resume()\n    })\n  }\n\n  register (client) {\n    this.client = client\n  }\n\n  // Actions\n  async didRun () {\n    this.client.console.clear()\n    let options = await this.client.getOptions()\n    switch (options.runType) {\n      case Runtype.CurrentFile:\n      case Runtype.Script:\n        if (options.runType === Runtype.CurrentFile) {\n          let editor = atom.workspace.getActiveTextEditor()\n          this.debugger.scriptPath = editor.getPath()\n        } else {\n          this.debugger.scriptPath = options.scriptPath\n          this.debugger.cwd = this.client.getPath()\n        }\n        this.client.console.info(`Starting Debugger on port ${options.port}`)\n        this.client.console.info(`Running script: ${this.debugger.scriptPath}`)\n        this.debugger.binaryPath = options.binaryPath\n        this.debugger.portNumber = options.port\n\n        this.debugger.launchArguments = options.launchArguments\n        this.debugger.environmentVariables = options.environmentVariables\n        this.debugger.executeScript().then(() => {\n          this.client.run()\n        })\n        break\n      case Runtype.Remote:\n        this.debugger.hostName = options.remoteUrl\n        this.debugger.portNumber = options.remotePort\n        this.debugger.connect().then(() => {\n          this.client.run()\n        })\n        break\n    }\n  }\n  didStop () {\n    this.client.console.clear()\n    this.debugger.stopScript().then(() => this.client.stop())\n  }\n  didResume () {\n    this.debugger.protocol.resume()\n  }\n  async didPause () {\n    let connected = this.debugger.protocol.isConnected()\n    if (connected) {\n      this.debugger.protocol.pause()\n    }\n  }\n  didAddBreakpoint (filePath, lineNumber) {\n    if (this.debugger.protocol.isConnected()) {\n      this.debugger.protocol.addBreakpoint(filePath, lineNumber)\n    }\n  }\n  didRemoveBreakpoint (filePath, lineNumber) {\n    if (this.debugger.protocol.isConnected()) {\n      this.debugger.protocol.removeBreakpoint(filePath, lineNumber)\n    }\n  }\n\n  didStepOver () {\n    this.debugger.protocol.stepOver()\n  }\n\n  didStepInto () {\n    this.debugger.protocol.stepInto()\n  }\n\n  didStepOut () {\n    this.debugger.protocol.stepOut()\n  }\n\n  async didRequestProperties (request, propertyView) {\n    let properties: any = await this.debugger.protocol.getProperties({\n      accessorPropertiesOnly: false,\n      generatePreview: false,\n      objectId: request.objectId,\n      ownProperties: true\n    })\n    propertyView.insertFromDescription(properties.result) // , ...accessors.result\n  }\n\n  async didEvaluateExpression (expression: string, evaluationView) {\n    let connected = this.debugger.protocol.isConnected()\n    let paused = this.debugger.protocol.isPaused()\n    if (connected && paused) {\n      let response: any = await this\n        .debugger\n        .protocol\n        .evaluate(expression)\n        .catch((e) => {\n          // do nothing\n        })\n      if (response) {\n        let result = response.result\n        if (result) {\n          evaluationView.insertFromResult(result)\n        }\n      }\n    }\n  }\n}\n"]}