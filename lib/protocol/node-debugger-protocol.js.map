{"version":3,"file":"node-debugger-protocol.js","sourceRoot":"","sources":["../../src/protocol/node-debugger-protocol.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n\nimport { request } from 'http'\nimport { EventEmitter }  from 'events'\nimport { join, parse } from 'path'\nimport { readFile } from 'fs'\nconst { SourceMapConsumer } = require('source-map')\n\nexport interface Script {\n  scriptId?: string,\n  url: string,\n  sourceMapURL?: string\n  sourceMap?: any\n}\n\nexport class NodeDebuggerProtocol extends EventEmitter {\n\n  private connected: boolean = false\n  private paused: boolean = false\n  private client: WebSocket\n  private nextRequestId: number = 0\n  private retry: number = 0\n  private breakpoints: Array<object> = []\n  private scripts: Array<Script> = []\n  private callFrames: Array<any> = []\n  private subscriptions:{\n    resolve: any,\n    reject: any\n  }[] = []\n\n  public isConnected () {\n    return this.connected\n  }\n\n  public isPaused () {\n    return this.paused\n  }\n\n  public disconnect () {\n    if (this.client) {\n      this.client.close()\n      this.reset()\n    }\n    this.client = null\n    this.paused = false\n    this.connected = false\n  }\n\n  public send (method, params?) {\n    return new Promise((resolve, reject) => {\n      let requestBody = {\n        id: this.nextRequestId, //(new Date().getTime()).toString(36),\n        method: method\n      }\n      if (params) {\n        requestBody['params'] = params\n      }\n      this.subscriptions[requestBody.id] = {\n        resolve: resolve,\n        reject: reject\n      }\n      this.client.send(JSON.stringify(requestBody))\n      this.nextRequestId++\n    })\n  }\n\n  private getSocketTarget (hostname: string, port: number): Promise<string> {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        let req = request({\n          hostname,\n          port,\n          path: '/json',\n          method: 'GET'\n        }, (res) => {\n          res.setEncoding('utf8')\n          res.on('data', (chunk) => {\n            try {\n              let targets = JSON.parse(String(chunk))\n              let socketUrl = false\n              targets.forEach((target) => {\n                if (target.webSocketDebuggerUrl) {\n                  socketUrl = target.webSocketDebuggerUrl\n                }\n              })\n              socketUrl ? resolve(socketUrl) : reject('Could not find socket url.')\n            } catch (e) {\n              reject(e)\n            }\n          })\n        })\n        req.on('error', reject)\n        req.end()\n      }, 500)\n    })\n  }\n\n  connect (hostname: string, port: number) {\n    this.retry++\n    return this\n      .getSocketTarget(hostname, port)\n      .then((socketUrl: string) => {\n        return new Promise((resolve, reject) => {\n          this.nextRequestId = 0\n          this.connected = false\n          this.client = new WebSocket(socketUrl)\n          this.client.onerror = (error) => {\n            if (this.retry < 3) {\n              setTimeout(() => {\n                resolve(this.connect(hostname, port))\n              }, 500)\n            } else {\n              this.emit('error', error)\n              reject(error)\n            }\n          }\n          this.client.onopen = async () => {\n            await Promise\n              .all([\n                this.send('Runtime.enable'),\n                this.send('Debugger.enable'),\n                this.send('Debugger.setPauseOnExceptions', { state: 'none' }),\n                this.send('Debugger.setAsyncCallStackDepth', { maxDepth: 0 }),\n                this.send('Profiler.enable'),\n                this.send('Profiler.setSamplingInterval', { interval: 100 }),\n                this.send('Debugger.setBlackboxPatterns', { patterns: [] }),\n                this.send('Runtime.runIfWaitingForDebugger')\n              ])\n              .then(() => {\n                this.connected = true\n                this.emit('start')\n              })\n            // await this.send('Debugger.resume')\n            resolve(this.connected)\n          }\n          this.client.onmessage = async (message: MessageEvent) => {\n            let response = JSON.parse(message.data)\n            if (response.id > -1 && this.subscriptions[response.id]) {\n              let subscription = this.subscriptions[response.id]\n              if (response.result) {\n                subscription.resolve(response.result)\n              } else {\n                subscription.reject(response.error)\n              }\n            } else {\n              let params = response.params\n              switch (response.method) {\n                case 'Debugger.paused':\n                  this.paused = true\n                  this.callFrames = params.callFrames\n                  this.emit('pause', params)\n                  break\n                case 'Debugger.resumed':\n                  this.paused = false\n                  this.emit('resume', params)\n                  break\n                case 'Debugger.scriptParsed':\n                  let script: Script = {\n                    scriptId: params.scriptId,\n                    url: params.url,\n                    sourceMapURL: params.sourceMapURL\n                  }\n                  if (params.sourceMapURL) {\n                    let sourcePath = parse(params.url)\n                    let mappingPath = join(sourcePath.dir, params.sourceMapURL)\n                    // script.sourceMapPath = sourcePath.dir\n                    let smc = await this.getSourceMapConsumer(mappingPath)\n                    script.sourceMap = {\n                      getOriginalPosition (lineNumber: number, columnNumber?: number) {\n                        let position = smc.originalPositionFor({\n                          line: lineNumber,\n                          column: columnNumber || 0\n                        })\n                        return {\n                          url: join(sourcePath.dir, position.source),\n                          lineNumber: position.line - 1,\n                          columnNumber: position.column\n                        }\n                      }\n                    }\n                    smc.sources.forEach((sourceUrl) => {\n                      let mapScript: Script = {\n                        // scriptId: params.scriptId,\n                        url: join(sourcePath.dir, sourceUrl),\n                        sourceMap: {\n                          getPosition (lineNumber: number, columnNumber?: number) {\n                            let position = smc.generatedPositionFor({\n                              source: sourceUrl,\n                              line: lineNumber,\n                              column: columnNumber || 0\n                            })\n                            return {\n                              url: params.url,\n                              lineNumber: position.line - 1\n                            }\n                          }\n                        }\n                      }\n                      this.emit('scriptParse', mapScript)\n                      this.scripts.push(mapScript)\n                    })\n                  }\n                  this.emit('scriptParse', script)\n                  this.scripts.push(script)\n                  break\n                case 'Runtime.exceptionThrown':\n                  this.emit('exception', params)\n                  break\n                case 'Runtime.consoleAPICalled':\n                  this.emit('console', params)\n                  break\n                // case 'Runtime.executionContextCreated':\n                //   break\n                default:\n                  console.log(response)\n              }\n            }\n          }\n          this.client.onclose = () => {\n            this.emit('close')\n          }\n        })\n      })\n  }\n\n  private getSourceMapConsumer (mappingPath: string): Promise<any>  {\n    return new Promise((resolve, reject) => {\n      readFile(mappingPath, (err, data) => {\n        if (err) {\n          reject(err)\n        } else {\n          let rawMapping = JSON.parse(data.toString())\n          let consumer = new SourceMapConsumer(rawMapping)\n          resolve(consumer)\n        }\n      })\n    })\n  }\n\n  public reset () {\n    this.retry = 0\n    this.breakpoints = []\n    this.scripts = []\n    this.subscriptions = []\n  }\n\n  public resume () {\n    return this.send('Debugger.resume')\n  }\n\n  public pause () {\n    return this.send('Debugger.pause')\n  }\n\n  public stepOver () {\n    return this.send('Debugger.stepOver')\n  }\n\n  public stepInto () {\n    return this.send('Debugger.stepInto')\n  }\n\n  public stepOut () {\n    return this.send('Debugger.stepOut')\n  }\n\n  public getProperties (options) {\n    return this.send('Runtime.getProperties', options)\n  }\n\n  public evaluateOnFrames (expression: string, frames: Array<any>) {\n    return new Promise((resolve, reject) => {\n      if (frames.length > 0) {\n        let frame = frames.shift()\n        if (frame && frame.callFrameId) {\n          this\n            .send('Debugger.evaluateOnCallFrame', {\n              callFrameId: frame.callFrameId,\n              expression: expression,\n              generatePreview: false,\n              silent: true,\n              returnByValue: false,\n              includeCommandLineAPI: false\n            })\n            .then((result: any) => {\n              let lookOnParent = frames.length > 0 &&\n                result.result.subtype === 'error' &&\n                result.result.className !== 'SyntaxError'\n              if (lookOnParent) {\n                resolve(this.evaluateOnFrames(expression, frames))\n              } else if (result && !result.exceptionDetails) {\n                resolve(result)\n              } else {\n                reject(result)\n              }\n            })\n        } else {\n          reject('frame has no id')\n        }\n      } else {\n        reject('there are no frames to evaluate')\n      }\n    })\n  }\n\n  public evaluate (expression: string) {\n    let frames = [...(this.callFrames || [])]\n    return this.evaluateOnFrames(expression, frames)\n  }\n\n  public getScriptById (scriptId: number): Script {\n    return this.scripts.find((s) => {\n      return parseInt(s.scriptId) === scriptId\n    })\n  }\n\n  public getScriptByUrl (url: string): Script {\n    return this.scripts.find((s) => {\n      return s.url === url\n    })\n  }\n\n  public getCallStack () {\n    return this.callFrames.map((frame: any) => {\n      frame.location.script = this.getScriptById(parseInt(frame.location.scriptId))\n      let sourceMap = frame.location.script.sourceMap\n      if (sourceMap) {\n        let position = sourceMap.getOriginalPosition(frame.location.lineNumber + 1,\n          frame.location.columnNumber)\n        frame.location.script.url = position.url\n        frame.location.lineNumber = position.lineNumber\n        frame.location.columnNumber = position.columnNumber\n      }\n      return frame\n    })\n  }\n\n  public getFrameByIndex (index: number) {\n    return this.callFrames[index]\n  }\n\n  public async setBreakpointFromScript (script: Script, lineNumber: number) {\n    let position = {\n      url: script.url,\n      lineNumber: lineNumber\n    }\n    if (script.sourceMap) {\n      position = script.sourceMap.getPosition(lineNumber)\n    }\n    return await this\n      .send('Debugger.setBreakpointByUrl', position)\n      .then((response: any) => {\n        this.breakpoints.push({\n          id: response.breakpointId,\n          url: script.url,\n          columnNumber: 0,\n          lineNumber\n        })\n      })\n  }\n\n  public addBreakpoint (url: string, lineNumber: number) {\n    let script = this.getScriptByUrl(url)\n    if (script) {\n      this.setBreakpointFromScript(script, lineNumber)\n    } else {\n      let listener = (script) => {\n        if (script.url === url) {\n          this.setBreakpointFromScript(script, lineNumber)\n          this.removeListener('scriptParse', listener)\n        }\n      }\n      this.addListener('scriptParse', listener)\n    }\n  }\n\n  public getBreakpointById (id): Promise<any> {\n    return new Promise ((resolve, reject) => {\n      let found = this.breakpoints.find((b: any) => {\n        return (b.id === id)\n      })\n      resolve(found)\n    })\n  }\n\n  public removeBreakpoint (url: string, lineNumber: number) {\n    let breakpoint: any = this.breakpoints.find((b: any) => {\n      return (b.url === url && b.lineNumber === lineNumber)\n    })\n    if (breakpoint) {\n      let index = this.breakpoints.indexOf(breakpoint)\n      this.breakpoints.splice(index, 1)\n      return this.send('Debugger.removeBreakpoint', {\n        breakpointId: breakpoint.id\n      })\n    }\n  }\n}\n"]}