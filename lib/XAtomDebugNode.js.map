{"version":3,"file":"XAtomDebugNode.js","sourceRoot":"","sources":["../src/XAtomDebugNode.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nconst { BufferedProcess, CompositeDisposable, Disposable } = require('atom');\nimport { Debugger } from './Debugger';\nimport { get } from 'lodash';\n\nexport class XAtomDebugNode {\n  public name: string = 'Node.js';\n  public iconPath = 'atom://xatom-debug-nodejs/icons/nodejs.svg';\n\n  private provider: any;\n  private session: any;\n  private launcher: any;\n  private process: any;\n\n  private debugger = new Debugger();\n  private subscriptions: any;\n\n  activate () {\n    require('atom-package-deps').install('xatom-debug', true);\n  }\n  deactivate () {\n    if (this.provider) {\n      this.provider.removePlugin(this.name);\n      this.stop();\n    }\n  }\n  async run () {\n    this.stop();\n    const options = await this.session.getControlOptions();\n    const scheme = await this.session.getSchemeOptions();\n    const host = '0.0.0.0';\n    const port = 9000;\n    console.log('options', options, scheme);\n    this.session.status({\n      text: `Launching Node.js...`,\n      loading: true\n    });\n    this.process = this.launcher.start('node', [\n      `--inspect=${host}:${port} --debug-brk`,\n      scheme.currentPath\n    ]);\n    this\n      .debugger\n      .attach(host, port)\n      .catch((e) => {\n        this.session.status({\n          text: 'Unable to attach debugger',\n          loading: false,\n          type: 'error'\n        });\n        this.launcher.end();\n      })\n      .then(async (domains) => {\n        if (options.pauseOnException) {\n          await this.debugger.setPauseOnExceptions('all');\n        }\n        await this.debugger.setBreakpointsActive(!options.disableBreakpoints);\n        this.session.status({\n          text: 'Running on Node.js',\n          loading: false,\n          type: 'success'\n        });\n        // Set current breakpoints\n        const breakpoints = await this.session.getBreakpoints();\n        // Start debugging session\n        this.session.start();\n        this.subscriptions = new CompositeDisposable(\n          this.debugger.onDidPause(async (params) => {\n            // if (params.reason === 'Break on start') {\n            //   this.continue();\n            // } else {\n              this.session.pause();\n              const callFrames = [];\n              // const location = <any> get(params, 'callFrames[0].location', null);\n              // build frames\n              get(params, 'callFrames', [])\n                .map((frame, index) => {\n                  const frameLocation: any = get(frame, 'location', {});\n                  return this\n                    .debugger\n                    .getScript((script) => {\n                      return script.scriptId === frameLocation.scriptId;\n                    })\n                    .then((script) => {\n                      const originalLocation = this.debugger.getScriptOriginalLocation(script,\n                        frameLocation.lineNumber,\n                        frameLocation.columnNumber);\n                      callFrames.push({\n                        filePath: originalLocation.filePath,\n                        functionName: frame.functionName,\n                        lineNumber: originalLocation.lineNumber,\n                        columnNumber: originalLocation.columnNumber\n                      });\n                      if (index === 0) {\n                        if (params.reason === 'exception') {\n                          this.session.markException(originalLocation);\n                        } else {\n                          this.session.markLocation(originalLocation);\n                        }\n                      }\n                    })\n                    .catch((e) => {\n                      console.log('1 unable to get script', frameLocation.scriptId);\n                    })\n                })\n                .reduce((r, v: any) => r.then(v), Promise.resolve())\n                .then(() => this.session.setFrames(callFrames));\n            // }\n          }),\n          this.debugger.onDidResume(() => {\n            this.session.resume();\n          }),\n          this.debugger.onDidLoadFile((filePath) => {\n            const breakpoint = breakpoints.find((b) => {\n              return filePath === b.filePath;\n            });\n            if (breakpoint) {\n              this.addBreakpoint(breakpoint);\n            }\n          }),\n          this.debugger.onDidException((params) => {\n            this.session.resume();\n            const error = get(params, 'exceptionDetails.text', 'Uncaught');\n            const description = get(params, 'exceptionDetails.exception.description', 'Exception');\n            this.session.status({\n              text: `${error} ${description}`,\n              loading: false,\n              type: 'error'\n            });\n          })\n        )\n      });\n  }\n  stop () {\n    if (this.process) this.process.kill();\n    this.debugger.dettach();\n    this.session.status({\n      text: 'Finished running on Node.js',\n      loading: false,\n      type: 'warning'\n    });\n    this.session.end();\n    if (this.subscriptions) {\n      this.subscriptions.dispose();\n    }\n  }\n  addBreakpoint (breakpoint) {\n    return this.debugger.addBreakpoint(breakpoint);\n  }\n  removeBreakpoint (breakpoint) {\n    return this.debugger.removeBreakpoint(breakpoint);\n  }\n  continue () {\n    this.debugger.resume();\n  }\n  pause () {\n    this.debugger.pause();\n  }\n  stepOver () {\n    this.debugger.stepOver();\n  }\n  stepInto () {\n    this.debugger.stepInto();\n  }\n  stepOut () {\n    this.debugger.stepOut();\n  }\n  registerPlugin (provider) {\n    this.provider = provider;\n    this.session = provider.getSession();\n    this.launcher = provider.getLauncher();\n    provider.addPlugin(this.name, this);\n  }\n}\n\nmodule.exports = new XAtomDebugNode();\n"]}
