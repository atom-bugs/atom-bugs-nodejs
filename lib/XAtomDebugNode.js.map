{"version":3,"file":"XAtomDebugNode.js","sourceRoot":"","sources":["../src/XAtomDebugNode.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nconst { BufferedProcess, CompositeDisposable, Disposable } = require('atom');\nimport { NodeDebugger } from './NodeDebugger';\nimport { get } from 'lodash';\n// import { NodeLauncher } from './NodeLauncher';\n\nexport class XAtomDebugNode {\n  public name: string = 'Node.js';\n  public iconPath = 'atom://xatom-debug-nodejs/icons/nodejs.svg';\n\n  private provider: any;\n  private session: any;\n  private launcher: any;\n  private process: any;\n\n  private debugger = new NodeDebugger();\n  private subscriptions: any;\n\n  activate () {\n    require('atom-package-deps').install('xatom-debug', true);\n  }\n  deactivate () {\n    if (this.provider) {\n      this.provider.removePlugin(this.name);\n      this.stop();\n    }\n  }\n  run () {\n    this.stop();\n    const options = this.session.getScheme();\n    const host = '0.0.0.0';\n    const port = 9000;\n    console.log('scheme options', options);\n    this.session.status({\n      text: `Launching Node.js...`,\n      loading: true\n    });\n    this.process = this.launcher.start('node', [\n      `--inspect-brk=${host}:${port}`,\n      options.currentPath\n    ]);\n    this\n      .debugger\n      .attach(host, port)\n      .catch((e) => {\n        this.session.status({\n          text: 'Unable to attach debugger',\n          loading: false,\n          type: 'error'\n        });\n        this.launcher.end();\n      })\n      .then(async (domains) => {\n        this.session.status({\n          text: 'Running on Node.js',\n          loading: false,\n          type: 'success'\n        });\n        // Set current breakpoints\n        const breakpoints = this.session.getBreakpoints();\n        // await breakpoints\n        //   .map((b) => this.addBreakpoint(b))\n        //   .reduce((r, i) => r.then(i), Promise.resolve());\n        // Start debugging session\n        this.session.start();\n        this.subscriptions = new CompositeDisposable(\n          this.debugger.onDidPause(() => {\n            this.session.pause();\n          }),\n          this.debugger.onDidResume(() => {\n            this.session.resume();\n          }),\n          this.debugger.onDidLoadFile((filePath) => {\n            const breakpoint = breakpoints.find((b) => {\n              return filePath === b.filePath;\n            });\n            if (breakpoint) {\n              this.addBreakpoint(breakpoint);\n            }\n          }),\n          this.debugger.onDidPauseOnLocation((location) => {\n            this.session.location(location)\n          }),\n          this.debugger.onDidException((params) => {\n            this.session.resume();\n            const error = get(params, 'exceptionDetails.text', 'Uncaught');\n            const description = get(params, 'exceptionDetails.exception.description', 'Exception');\n            this.session.status({\n              text: `${error} ${description}`,\n              loading: false,\n              type: 'error'\n            });\n          })\n        )\n      });\n  }\n  stop () {\n    if (this.process) this.process.kill();\n    this.debugger.dettach();\n    this.session.status({\n      text: 'Finished running on Node.js',\n      loading: false,\n      type: 'warning'\n    });\n    this.session.end();\n    if (this.subscriptions) {\n      this.subscriptions.dispose();\n    }\n  }\n  addBreakpoint (breakpoint) {\n    return this.debugger.addBreakpoint(breakpoint);\n  }\n  removeBreakpoint (breakpoint) {\n    return this.debugger.removeBreakpoint(breakpoint);\n  }\n  continue () {\n    this.debugger.resume();\n  }\n  pause () {\n    this.debugger.pause();\n  }\n  stepOver () {\n    this.debugger.stepOver();\n  }\n  stepInto () {\n    this.debugger.stepInto();\n  }\n  stepOut () {\n    this.debugger.stepOut();\n  }\n  registerPlugin (provider) {\n    this.provider = provider;\n    this.session = provider.getSession();\n    this.launcher = provider.getLauncher();\n    provider.addPlugin(this.name, this);\n  }\n}\n\nmodule.exports = new XAtomDebugNode();\n"]}